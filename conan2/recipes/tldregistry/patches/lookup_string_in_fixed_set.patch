--- a/conan/recipes/tldregistry/chromium/net/base/lookup_string_in_fixed_set.cc
+++ b/conan/recipes/tldregistry/chromium/net/base/lookup_string_in_fixed_set.cc
@@ -4,7 +4,8 @@
 
 #include "net/base/lookup_string_in_fixed_set.h"
 
-#include "base/check.h"
+/*#include "base/check.h"*/
+#define DCHECK(x_) ((void)(x_))
 
 namespace net {
 
@@ -201,7 +202,7 @@ int LookupStringInFixedSet(const unsigned char* graph,
 // LookupStringInFixedSet::Advance() at compile time. Tests on x86_64 linux
 // indicated about 10% increased runtime cost for GetRegistryLength() in average
 // if the implementation of this function was separated from the lookup methods.
-int LookupSuffixInReversedSet(const unsigned char* graph,
+/*int LookupSuffixInReversedSet(const unsigned char* graph,
                               size_t length,
                               bool include_private,
                               base::StringPiece host,
@@ -227,6 +228,6 @@ int LookupSuffixInReversedSet(const unsigned char* graph,
     }
   }
   return result;
-}
+}*/
 
 }  // namespace net
--- a/conan/recipes/tldregistry/chromium/net/base/lookup_string_in_fixed_set.h
+++ b/conan/recipes/tldregistry/chromium/net/base/lookup_string_in_fixed_set.h
@@ -7,8 +7,8 @@
 
 #include <stddef.h>
 
-#include "base/strings/string_piece.h"
-#include "net/base/net_export.h"
+/*#include "base/strings/string_piece.h"
+#include "net/base/net_export.h"*/
 
 namespace net {
 
@@ -33,7 +33,7 @@ enum {
 // kDafsaWildcardRule and kDafsaPrivateRule ORed together.
 //
 // TODO(nick): Replace this with FixedSetIncrementalLookup everywhere.
-NET_EXPORT int LookupStringInFixedSet(const unsigned char* graph,
+/*NET_EXPORT*/ int LookupStringInFixedSet(const unsigned char* graph,
                                       size_t length,
                                       const char* key,
                                       size_t key_length);
@@ -44,11 +44,11 @@ NET_EXPORT int LookupStringInFixedSet(const unsigned char* graph,
 // If no match was found a value of 0 is written to |suffix_length| and the
 // value kDafsaNotFound is returned, otherwise the length of the longest match
 // is written to |suffix_length| and the type of the longest match is returned.
-int LookupSuffixInReversedSet(const unsigned char* graph,
+/*int LookupSuffixInReversedSet(const unsigned char* graph,
                               size_t length,
                               bool include_private,
                               base::StringPiece host,
-                              size_t* suffix_length);
+                              size_t* suffix_length);*/
 
 // FixedSetIncrementalLookup provides efficient membership and prefix queries
 // against a fixed set of strings. The set of strings must be known at compile
@@ -89,7 +89,7 @@ int LookupSuffixInReversedSet(const unsigned char* graph,
 //    }
 //    return input.substr(0, longest_match_end);
 //
-class NET_EXPORT FixedSetIncrementalLookup {
+class /*NET_EXPORT*/ FixedSetIncrementalLookup {
  public:
   // Begin a lookup against the provided fixed set. |graph| and |length|
   // describe a byte buffer generated by the make_dafsa.py script, as described
