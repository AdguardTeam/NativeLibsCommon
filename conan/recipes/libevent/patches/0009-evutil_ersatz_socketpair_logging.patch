diff --git a/evutil.c b/evutil.c
index 3cd84509..09847439 100644
--- a/evutil.c
+++ b/evutil.c
@@ -244,49 +244,72 @@ evutil_ersatz_socketpair_(int family, int type, int protocol,
 	}
 
 	listener = socket(AF_INET, type, 0);
-	if (listener < 0)
-		return -1;
+	if (listener < 0) {
+	    int error = EVUTIL_SOCKET_ERROR();
+        event_warnx("%s failed at %d: (%d) %s", __func__, __LINE__, error, evutil_socket_error_to_string(error));
+        return -1;
+    }
 	memset(&listen_addr, 0, sizeof(listen_addr));
 	listen_addr.sin_family = AF_INET;
 	listen_addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
 	listen_addr.sin_port = 0;	/* kernel chooses port.	 */
 	if (bind(listener, (struct sockaddr *) &listen_addr, sizeof (listen_addr))
-		== -1)
-		goto tidy_up_and_fail;
-	if (listen(listener, 1) == -1)
-		goto tidy_up_and_fail;
+		== -1) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto tidy_up_and_fail;
+    }
+	if (listen(listener, 1) == -1) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto tidy_up_and_fail;
+    }
 
 	connector = socket(AF_INET, type, 0);
-	if (connector < 0)
+	if (connector < 0) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
 		goto tidy_up_and_fail;
+	}
 
 	memset(&connect_addr, 0, sizeof(connect_addr));
 
 	/* We want to find out the port number to connect to.  */
 	size = sizeof(connect_addr);
-	if (getsockname(listener, (struct sockaddr *) &connect_addr, &size) == -1)
-		goto tidy_up_and_fail;
-	if (size != sizeof (connect_addr))
-		goto abort_tidy_up_and_fail;
+	if (getsockname(listener, (struct sockaddr *) &connect_addr, &size) == -1) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto tidy_up_and_fail;
+    }
+	if (size != sizeof (connect_addr)) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto abort_tidy_up_and_fail;
+    }
 	if (connect(connector, (struct sockaddr *) &connect_addr,
-				sizeof(connect_addr)) == -1)
-		goto tidy_up_and_fail;
+				sizeof(connect_addr)) == -1) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto tidy_up_and_fail;
+    }
 
 	size = sizeof(listen_addr);
 	acceptor = accept(listener, (struct sockaddr *) &listen_addr, &size);
-	if (acceptor < 0)
-		goto tidy_up_and_fail;
-	if (size != sizeof(listen_addr))
-		goto abort_tidy_up_and_fail;
+	if (acceptor < 0) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto tidy_up_and_fail;
+    }
+	if (size != sizeof(listen_addr)) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto abort_tidy_up_and_fail;
+    }
 	/* Now check we are talking to ourself by matching port and host on the
 	   two sockets.	 */
-	if (getsockname(connector, (struct sockaddr *) &connect_addr, &size) == -1)
-		goto tidy_up_and_fail;
+	if (getsockname(connector, (struct sockaddr *) &connect_addr, &size) == -1) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto tidy_up_and_fail;
+    }
 	if (size != sizeof (connect_addr)
 		|| listen_addr.sin_family != connect_addr.sin_family
 		|| listen_addr.sin_addr.s_addr != connect_addr.sin_addr.s_addr
-		|| listen_addr.sin_port != connect_addr.sin_port)
-		goto abort_tidy_up_and_fail;
+		|| listen_addr.sin_port != connect_addr.sin_port) {
+        event_warnx("%s failed at %d", __func__, __LINE__);
+        goto abort_tidy_up_and_fail;
+    }
 	evutil_closesocket(listener);
 	fd[0] = connector;
 	fd[1] = acceptor;
@@ -305,6 +328,7 @@ evutil_ersatz_socketpair_(int family, int type, int protocol,
 	if (acceptor != -1)
 		evutil_closesocket(acceptor);
 
+    event_warnx("%s: (%d) %s", __func__, saved_errno, evutil_socket_error_to_string(saved_errno));
 	EVUTIL_SET_SOCKET_ERROR(saved_errno);
 	return -1;
 #undef ERR
