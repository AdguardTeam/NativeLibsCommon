diff --git a/CMake/FindNGHTTP2.cmake b/CMake/FindNGHTTP2.cmake
index 3957646c4..d3528cb27 100644
--- a/CMake/FindNGHTTP2.cmake
+++ b/CMake/FindNGHTTP2.cmake
@@ -25,7 +25,7 @@ include(FindPackageHandleStandardArgs)
 
 find_path(NGHTTP2_INCLUDE_DIR "nghttp2/nghttp2.h")
 
-find_library(NGHTTP2_LIBRARY NAMES nghttp2)
+find_library(NGHTTP2_LIBRARY NAMES nghttp2 nghttp2_static)
 
 find_package_handle_standard_args(NGHTTP2
     FOUND_VAR
diff --git a/CMake/FindNGHTTP3.cmake b/CMake/FindNGHTTP3.cmake
index 9b13e6c6f..f8aaaa85c 100644
--- a/CMake/FindNGHTTP3.cmake
+++ b/CMake/FindNGHTTP3.cmake
@@ -52,7 +52,7 @@ find_path(NGHTTP3_INCLUDE_DIR nghttp3/nghttp3.h
     ${PC_NGHTTP3_INCLUDE_DIRS}
 )
 
-find_library(NGHTTP3_LIBRARY NAMES nghttp3
+find_library(NGHTTP3_LIBRARY NAMES nghttp3 nghttp3_static
   HINTS
     ${PC_NGHTTP3_LIBDIR}
     ${PC_NGHTTP3_LIBRARY_DIRS}
diff --git a/CMake/FindNGTCP2.cmake b/CMake/FindNGTCP2.cmake
index 9f4e9f233..e34072c61 100644
--- a/CMake/FindNGTCP2.cmake
+++ b/CMake/FindNGTCP2.cmake
@@ -58,7 +58,7 @@ find_path(NGTCP2_INCLUDE_DIR ngtcp2/ngtcp2.h
     ${PC_NGTCP2_INCLUDE_DIRS}
 )
 
-find_library(NGTCP2_LIBRARY NAMES ngtcp2
+find_library(NGTCP2_LIBRARY NAMES ngtcp2 ngtcp2_static
   HINTS
     ${PC_NGTCP2_LIBDIR}
     ${PC_NGTCP2_LIBRARY_DIRS}
@@ -87,6 +87,7 @@ if(NGTCP2_FIND_COMPONENTS)
     find_library(${_crypto_library}_LIBRARY
       NAMES
         ${_crypto_library}
+        ${_crypto_library}_static
       HINTS
         ${PC_${_crypto_library}_LIBDIR}
         ${PC_${_crypto_library}_LIBRARY_DIRS}
diff --git a/CMakeLists.txt b/CMakeLists.txt
index b97704bfe..23c5ab401 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -501,7 +501,11 @@ function(CheckQuicSupportInOpenSSL)
   if(NOT DEFINED HAVE_SSL_CTX_SET_QUIC_METHOD)
     cmake_push_check_state()
     set(CMAKE_REQUIRED_INCLUDES   "${OPENSSL_INCLUDE_DIR}")
-    set(CMAKE_REQUIRED_LIBRARIES  "${OPENSSL_LIBRARIES}")
+    if (NOT ANDROID AND NOT APPLE AND NOT WIN32)
+      set(CMAKE_REQUIRED_LIBRARIES  "${OPENSSL_LIBRARIES}" "pthread")
+    else()
+      set(CMAKE_REQUIRED_LIBRARIES  "${OPENSSL_LIBRARIES}")
+    endif()
     check_symbol_exists(SSL_CTX_set_quic_method "openssl/ssl.h" HAVE_SSL_CTX_SET_QUIC_METHOD)
     cmake_pop_check_state()
   endif()
